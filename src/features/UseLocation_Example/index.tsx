import { useLocation } from "react-router-dom";
import { useEffect, useState } from "react";

/**
 * Gi·∫£ x·ª≠ nh∆∞ c√°i object tr·∫£ v·ªÅ c√≥ d·∫°ng nh∆∞ sau :
 *  {
 *      pathname: "/posts",
 *      search: "?page=1&size=10&sort=title,ASC&sort=dateUpdate,DESC",
 *      hash: "",
 *      state: null
 *   }
 */

interface Post {
  id: number;
  title: string;
  body: string;
}

function PostList() {
  const location = useLocation();
  const [posts, setPosts] = useState<Post[]>([]); // <- l·∫•y b√†i post
  const [loading, setLoading] = useState(true); // <- l·∫•y c√°i reload

  useEffect(() => {
    // ‚úÖ 1. L·∫•y query t·ª´ URL
    const queryParams = new URLSearchParams(location.search); // <- search l√† n·∫±m trong th∆∞ vi·ªán c·ªßa URLSearchParams

    const page = queryParams.get("page") || "0";
    const size = queryParams.get("size") || "10";
    const sort = queryParams.getAll("sort"); // c√≥ th·ªÉ c√≥ nhi·ªÅu sort

    console.log("Page:", page, "Size:", size, "Sort:", sort);

    // ‚úÖ 2. G·ªçi API v·ªõi c√°c param n√†y
    setLoading(true);
    const apiUrl = `/api/posts?page=${page}&size=${size}&${sort
      .map((s) => `sort=${s}`)
      .join("&")}`; // <- v√≠ d·ª• nh∆∞ BE truy·ªÅn th√™m dateUpdate ..v..v th√¨ d√πng map ƒë·ªÉ join to√†n b·ªô

    fetch(apiUrl)
      .then((res) => res.json())
      .then((data) => {
        setPosts(data.content || []); // gi·∫£ s·ª≠ BE tr·∫£ theo d·∫°ng Spring pageable
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, [location.search]); // üëà M·ªói khi URL query thay ƒë·ªïi, g·ªçi l·∫°i API

  if (loading) return <p>ƒêang t·∫£i...</p>;

  return (
    <div>
      <h2>Danh s√°ch b√†i vi·∫øt</h2>
      <ul>
        {posts.map((p) => (
          <li key={p.id}>{p.title}</li> // danh s√°ch c√°c b√†i vi·∫øt
        ))}
      </ul>
    </div>
  );
}

export default PostList;
/**
| Hook               | Vai tr√≤                              |
| ------------------ | ------------------------------------ |
| `useLocation()`    | ƒê·ªçc URL hi·ªán t·∫°i (ƒë·∫∑c bi·ªát `search`) |
| `URLSearchParams`  | Ph√¢n t√°ch query params               |
| `useEffect([...])` | T·ª± ƒë·ªông fetch l·∫°i khi query thay ƒë·ªïi |
| `useState()`       | L∆∞u danh s√°ch v√† tr·∫°ng th√°i loading  |

 */
